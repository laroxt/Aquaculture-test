var block = document.getElementsByTagName("pre");
for (var i = 0; i < block.length; i++) {
  if (block[i].classList.contains("nonlisted")) {
    continue;
  }
  var d = document.createElement("div");
  d.innerHTML = "<strong>Show/Hide Code</strong>";
  if (block[i].hasAttribute("title")) {
    d.innerHTML += ": " + block[i].getAttribute("title");
  }
  d.className = "show-hide-code";
  block[i].parentElement.insertBefore(d, block[i]);
  d.addEventListener(
    "click",
    (function (element) {
      return function () {
        element.classList.toggle("pre-show");
      };
    })(block[i]),
    false
  );
}
var t = document.querySelectorAll("table.example-table.multiselectable");
for (var i = 0; i < t.length; i++) {
  t[i].addEventListener(
    "click",
    function (event) {
      var target = event.target;
      do {
        if (target.tagName == "TD" || target.tagName == "TH") {
          break;
        }
      } while ((target = target.parentElement));
      if (target) {
        var has = target.classList.contains("selected");
        target.classList.toggle("selected");
      }
    },
    false
  );
}

var t = document.querySelectorAll("table.example-table.selectable");
for (var i = 0; i < t.length; i++) {
  t[i].addEventListener(
    "click",
    function (event) {
      var target = event.target;
      do {
        if (target.tagName == "TD" || target.tagName == "TH") {
          break;
        }
      } while ((target = target.parentElement));
      if (target) {
        var table = target;
        while ((table = table.parentElement)) {
          if (table.tagName == "TABLE") {
            break;
          }
        }
        if (table) {
          var selected = table.getElementsByClassName("selected");
          for (var j = 0; j < selected.length; j++) {
            selected[j].classList.remove("selected");
          }
          target.classList.add("selected");
          if (table.hasAttribute("oncellselect")) {
            (function () {
              return eval(table.getAttribute("oncellselect"));
            }.call(target));
          }
        }
      }
    },
    false
  );
}
function merge() {
  var element = document.getElementById("table-merge-split"),
    cells = element.querySelectorAll(".selected"),
    table = new Table(element);
  table.merge(cells, function (colspan, rowspan, kept, removed) {
    var content = kept.innerHTML;
    for (var i = 0; i < removed.length; i++) {
      content += " " + removed[i].innerHTML;
    }
    kept.innerHTML = content;
  });
}
function group() {
  var element = document.getElementById("table-merge-split"),
    cells = element.querySelectorAll(".selected"),
    table = new Table(element);
  console.dir(table.group(cells));
}
function split() {
  var element = document.getElementById("table-merge-split"),
    cells = element.querySelectorAll(".selected"),
    table = new Table(element);
  table.split(cells, function (newcell) {
    newcell.innerHTML = "New";
    newcell.classList.add("selected");
  });
}
function normalizeTable() {
  var element = document.getElementById("table-normalize"),
    table = new Table(element);
  table.normalize();
}
function rowBefore() {
  var element = document.getElementById("table-row-col"),
    table = new Table(element),
    cell = element.querySelector(".selected");
  if (cell) {
    var position = table.position(cell);
    table.insertRow(position.y, function (cell) {
      cell.innerHTML = "0";
    });
  }
}
function rowAfter() {
  var element = document.getElementById("table-row-col"),
    table = new Table(element),
    cell = element.querySelector(".selected");
  if (cell) {
    var position = table.position(cell);
    table.insertRow(position.y + cell.rowSpan, function (cell) {
      cell.innerHTML = "0";
    });
  }
}
function removeRow() {
  var element = document.getElementById("table-row-col"),
    table = new Table(element),
    cell = element.querySelector(".selected");
  if (cell) {
    var position = table.position(cell);
    table.removeRow(position.y);
  }
}
function colBefore() {
  var element = document.getElementById("table-row-col"),
    table = new Table(element),
    cell = element.querySelector(".selected");
  if (cell) {
    var position = table.position(cell);
    table.insertCol(position.x, function (cell) {
      cell.innerHTML = "0";
    });
  }
}
function colAfter() {
  var element = document.getElementById("table-row-col"),
    table = new Table(element),
    cell = element.querySelector(".selected");
  if (cell) {
    var position = table.position(cell);
    table.insertCol(position.x + cell.colSpan, function (cell) {
      cell.innerHTML = "0";
    });
  }
}
function removeCol() {
  var element = document.getElementById("table-row-col"),
    table = new Table(element),
    cell = element.querySelector(".selected");
  if (cell) {
    var position = table.position(cell);
    table.removeCol(position.x);
  }
}
function position() {
  var element = document.getElementById("table-position"),
    table = new Table(element),
    cell = element.querySelector(".selected");
  if (cell) {
    var position = table.position(cell);
    document.getElementById("position-x").innerHTML = position.x;
    document.getElementById("position-y").innerHTML = position.y;
  }
}
var links = document.querySelectorAll('.definition code[id^="tableObject"]'),
  frag = document.createDocumentFragment();
//debugger;
var results = [];
for (var i = 0, link; i < links.length; i++) {
  link = links[i];
  var title = "";
  link.id.replace(/^tableObject([a-z]+)/i, function (full, one) {
    one = one.charAt(0).toLowerCase() + one.substring(1);
    title = one;
  });
  results.push([title, link.id]);
}
results.sort(function (a, b) {
  var textA = a[0].toUpperCase();
  var textB = b[0].toUpperCase();
  return textA < textB ? -1 : textA > textB ? 1 : 0;
});
for (var i = 0; i < results.length; i++) {
  var a = document.createElement("a"),
    li = document.createElement("li");
  a.href = "#" + results[i][1];
  a.innerHTML = "." + results[i][0] + "()";
  li.appendChild(a);
  frag.appendChild(li);
}
document.getElementById("tdm").appendChild(frag);
